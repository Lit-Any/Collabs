/*
  LifeSimulator.java ‚Äî Unified Life + Economy (BlueJ-compatible, console)
  ----------------------------------------------------------
  - Merges Life Simulator (Code2) with the full Economic Framework (Code1)
  - One unified menu per player's turn:
      * Life actions (study, work, improve, risky, etc.)
      * Economic actions (banking, 20 gambling games, lottery, Rummy)
  - Player creation is handled here (Code1's player-adder removed)
  - Code1's leaderboard removed as requested
  - Money type unified to 'long' (integer currency). Doubles from Code1 are rounded.
  - Rummy card game preserved (consent poll among current players)
  - BlueJ-friendly, single file, console I/O

  Notes:
  - This version is console-based for a clean, unified flow.
  - All economic profits/losses immediately affect the same player's balance used by life actions.
*/

import java.io.*;
import java.util.*;
import LifeSimSupport.*;

public class LifeSimulator {

    /* =========================
       ========== CORE =========
       ========================= */

    static final Scanner SC = new Scanner(System.in);
    static final Random RNG = new Random();

    /* ===============================
       ========== ECONOMY ============
       =============================== */

    static class Economy {
        static Random rand = new Random();

        // Pools (unified to long)
        static long jackpotPool = 0L;       // gambling: all lost bets accumulate here until next win
        static long lotteryBonusPool = 0L;  // lottery: 10% tax accumulates across rounds

        /* ---- Unified Economic Menu ---- */
        static void economicMenu(Person p, List<Person> allPlayers) {
            boolean back = false;
            while (!back) {
                System.out.println("\n--- üíº Economic Actions for " + p.name + " ---");
                System.out.println("Balance: Rs." + p.balance + " | Loan: Rs." + p.loan + " | Jackpot: Rs." + jackpotPool + " | Lottery Bonus: Rs." + lotteryBonusPool);
                System.out.println(
                    "1) Deposit\n" +
                    "2) Withdraw\n" +
                    "3) Take Loan\n" +
                    "4) Repay Loan\n" +
                    "5) Gamble (20 games)\n" +
                    "6) Lottery\n" +
                    "7) Start Card Games (Rummy)\n" +
                    "8) Back"
                );
                System.out.print("Choose: ");
                int c = readInt();
                switch (c) {
                    case 1: System.out.print("Amount to deposit: "); p.deposit(readLong()); break;
                    case 2: System.out.print("Amount to withdraw: "); p.withdraw(readLong()); break;
                    case 3: System.out.print("Loan amount: "); p.takeLoan(readLong()); break;
                    case 4: System.out.print("Repay amount: "); p.repayLoan(readLong()); break;
                    case 5: gambleMenu(p); break;
                    case 6: lotterySystem(allPlayers); break;
                    case 7: startCardPoll(allPlayers); break;
                    case 8: back = true; break;
                    default: System.out.println("‚ùå Invalid choice.");
                }
            }
        }

        /* ---- Gambling Menu (all 20 games preserved, adapted to long) ---- */
        static void gambleMenu(Person p) {
            System.out.println("\n--- üé∞ Gambling Games Menu ---");
            System.out.println("1. Dice Guess\n2. Coin Toss\n3. High or Low\n4. Lucky Number\n5. Double or Nothing");
            System.out.println("6. Spin Wheel\n7. Odd or Even\n8. Pick a Card\n9. Mini Lottery\n10. Rock Paper Scissors");
            System.out.println("11. Blackjack Lite\n12. Roulette\n13. Slot Machine\n14. Horse Race\n15. Poker Draw");
            System.out.println("16. High Card War\n17. Cricket Bet\n18. Football Penalty\n19. Stock Bet\n20. Jackpot Lottery");
            System.out.print("Choose a game (1-20): ");
            int choice = readInt();

            System.out.print("Enter your bet amount (Rs.): ");
            long bet = readLong();

            if (bet <= 0) { System.out.println("‚ùå Bet must be positive."); return; }
            if (bet > p.balance) { System.out.println("‚ùå Not enough balance!"); return; }

            // Take the bet upfront (at-risk model)
            p.balance -= bet; p.addFlow(bet); p.gamblesPlayed++; p.moneyLost += bet; jackpotPool += bet;

            long winnings = 0;
            switch (choice) {
                case 1:  winnings = gambleDiceGuess(bet); break;
                case 2:  winnings = gambleCoinToss(bet); break;
                case 3:  winnings = gambleHighLow(bet); break;
                case 4:  winnings = gambleLuckyNumber(bet); break;
                case 5:  winnings = gambleDoubleOrNothing(bet); break;
                case 6:  winnings = gambleSpinWheel(bet); break;
                case 7:  winnings = gambleOddEven(bet); break;
                case 8:  winnings = gamblePickCard(bet); break;
                case 9:  winnings = gambleMiniLottery(bet); break;
                case 10: winnings = gambleRPS(bet); break;
                case 11: winnings = gambleBlackjack(bet); break;
                case 12: winnings = gambleRoulette(bet); break;
                case 13: winnings = gambleSlotMachine(bet); break;
                case 14: winnings = gambleHorseRace(bet); break;
                case 15: winnings = gamblePoker(bet); break;
                case 16: winnings = gambleHighCardWar(bet); break;
                case 17: winnings = gambleCricket(bet); break;
                case 18: winnings = gambleFootball(bet); break;
                case 19: winnings = gambleStock(bet); break;
                case 20: winnings = gambleJackpotLottery(bet); break;
                default:
                    System.out.println("‚ùå Invalid choice.");
                    return;
            }

            // Push handling (winnings == bet): refund bet, no jackpot, fix stats
            if (winnings == bet) {
                p.balance += bet; p.addFlow(bet);
                jackpotPool = Math.max(0, jackpotPool - bet);
                p.moneyLost -= bet;
                System.out.println("‚ÜîÔ∏è  Push! Bet Rs." + bet + " returned. (no jackpot awarded)");
                return;
            }

            if (winnings > 0) {
                long payout = winnings + jackpotPool;
                p.balance += payout; p.addFlow(payout);
                p.gamblesWon++; p.moneyWon += payout;
                System.out.println("üéâ " + p.name + " won Rs." + payout + "! (includes jackpot pool)");
                jackpotPool = 0;
            } else {
                p.gamblesLost++;
                System.out.println("‚ùå You lost this gamble. (jackpot grows: Rs." + jackpotPool + ")");
            }
        }

        /* ---- Games (adapted to long & console prompts) ---- */

        static int askInt(String prompt) { System.out.print(prompt); return readInt(); }
        static String askStr(String prompt) { System.out.print(prompt); return SC.next(); }

        static long gambleDiceGuess(long bet) {
            int guess = askInt("Guess dice roll (1-6): ");
            if (guess < 1 || guess > 6) { System.out.println("‚ùå Invalid guess."); return 0; }
            int roll = rand.nextInt(6) + 1;
            System.out.println("üé≤ Dice rolled: " + roll);
            return (guess == roll) ? bet * 5 : 0;
        }

        static long gambleCoinToss(long bet) {
            int guess = askInt("Guess Heads(1) or Tails(2): ");
            if (guess != 1 && guess != 2) { System.out.println("‚ùå Invalid choice."); return 0; }
            int toss = rand.nextInt(2) + 1;
            System.out.println("ü™ô Toss result: " + (toss == 1 ? "Heads" : "Tails"));
            return (guess == toss) ? bet * 2 : 0;
        }

        static long gambleHighLow(long bet) {
            int number = rand.nextInt(100) + 1;
            String guess = askStr("Guess High (>50) or Low (<=50): ");
            boolean high = number > 50;
            System.out.println("Number: " + number);
            return ((guess.equalsIgnoreCase("High") && high) || (guess.equalsIgnoreCase("Low") && !high)) ? bet * 2 : 0;
        }

        static long gambleLuckyNumber(long bet) {
            int guess = askInt("Pick a number (1-10): ");
            if (guess < 1 || guess > 10) { System.out.println("‚ùå Invalid number."); return 0; }
            int lucky = rand.nextInt(10) + 1;
            System.out.println("Lucky number: " + lucky);
            return (guess == lucky) ? bet * 10 : 0;
        }

        static long gambleDoubleOrNothing(long bet) { return rand.nextBoolean() ? bet * 2 : 0; }

        static long gambleSpinWheel(long bet) {
            int spin = rand.nextInt(100);
            // 0-9: 10x, 10-29: 3x, 30-99: lose
            return (spin < 10) ? bet * 10 : (spin < 30 ? bet * 3 : 0);
        }

        static long gambleOddEven(long bet) {
            String guess = askStr("Guess Odd or Even: ");
            int num = rand.nextInt(100);
            System.out.println("Number: " + num);
            boolean even = (num % 2 == 0);
            return ((even && guess.equalsIgnoreCase("Even")) || (!even && guess.equalsIgnoreCase("Odd"))) ? bet * 2 : 0;
        }

        static long gamblePickCard(long bet) {
            int card = rand.nextInt(13) + 1; // 1..13
            System.out.println("Card value drawn: " + card);
            return (card == 1 || card == 13) ? bet * 5 : (card >= 11 ? bet * 3 : 0);
        }

        static long gambleMiniLottery(long bet) {
            int draw = rand.nextInt(100);
            System.out.println("Mini-lottery roll: " + draw + " (win on 0)");
            return (draw == 0) ? bet * 50 : 0;
        }

        static long gambleRPS(long bet) {
            int user = askInt("Choose Rock(1), Paper(2), Scissors(3): ");
            if (user < 1 || user > 3) { System.out.println("‚ùå Invalid move."); return 0; }
            int comp = rand.nextInt(3) + 1;
            System.out.println("Computer chose: " + comp);
            if (user == comp) return bet; // push
            if ((user == 1 && comp == 3) || (user == 2 && comp == 1) || (user == 3 && comp == 2)) return bet * 2;
            return 0;
        }

        static long gambleBlackjack(long bet) {
            int player = rand.nextInt(11) + 10; // 10..20
            int dealer = rand.nextInt(11) + 10; // 10..20
            System.out.println("üÇ° Player: " + player + " | Dealer: " + dealer);
            return (player > dealer) ? bet * 2 : (player == dealer ? bet : 0);
        }

        static long gambleRoulette(long bet) {
            String guess = askStr("Bet on Red or Black: ");
            String result = rand.nextBoolean() ? "Red" : "Black";
            System.out.println("üé° Roulette: " + result);
            return (guess.equalsIgnoreCase(result)) ? bet * 2 : 0;
        }

        static long gambleSlotMachine(long bet) {
            int a = rand.nextInt(5), b = rand.nextInt(5), c = rand.nextInt(5);
            System.out.println("üé∞ " + a + " | " + b + " | " + c);
            return (a == b && b == c) ? bet * 10 : (a == b || b == c || a == c ? bet * 3 : 0);
        }

        static long gambleHorseRace(long bet) {
            int guess = askInt("Pick horse (1-5): ");
            if (guess < 1 || guess > 5) { System.out.println("‚ùå Invalid horse."); return 0; }
            int winner = rand.nextInt(5) + 1;
            System.out.println("üèá Winner: Horse " + winner);
            return (guess == winner) ? bet * 4 : 0;
        }

        static long gamblePoker(long bet) {
            int hand = rand.nextInt(100);
            System.out.println("üÉè Hand strength roll: " + hand);
            return (hand < 5) ? bet * 20 : (hand < 20 ? bet * 5 : 0);
        }

        static long gambleHighCardWar(long bet) {
            int player = rand.nextInt(13) + 1;
            int dealer = rand.nextInt(13) + 1;
            System.out.println("War ‚Äî You: " + player + " vs Dealer: " + dealer);
            return (player > dealer) ? bet * 2 : (player == dealer ? bet : 0);
        }

        static long gambleCricket(long bet) {
            int guess = askInt("Guess runs (1-6): ");
            if (guess < 1 || guess > 6) { System.out.println("‚ùå Invalid runs."); return 0; }
            int run = rand.nextInt(6) + 1;
            System.out.println("üèè Batsman scored: " + run);
            return (guess == run) ? bet * 6 : 0;
        }

        static long gambleFootball(long bet) {
            int guess = askInt("Choose Left(1), Center(2), Right(3): ");
            if (guess < 1 || guess > 3) { System.out.println("‚ùå Invalid direction."); return 0; }
            int goalie = rand.nextInt(3) + 1;
            System.out.println("‚öΩ Goalie defended: " + goalie);
            return (guess != goalie) ? bet * 3 : 0;
        }

        static long gambleStock(long bet) {
            boolean up = rand.nextBoolean();
            double mult = up ? (1.2 + rand.nextDouble() * 0.8) : (0.5 + rand.nextDouble() * 0.5); // up:1.2..2.0, down:0.5..1.0
            long payout = Math.round(bet * mult);
            System.out.println("üìà Stock " + (up ? "UP" : "DOWN") + " ‚Üí multiplier ~" + String.format("%.2f", mult));
            return up ? payout : 0; // down ‚Üí lose bet
        }

        static long gambleJackpotLottery(long bet) {
            int draw = rand.nextInt(1000);
            System.out.println("üéü Jackpot draw: " + draw + " (win on 0)");
            return (draw == 0) ? bet * 500 : 0;
        }

        /* ---- Lottery (with accumulating bonus pool) ---- */
        static void lotterySystem(List<Person> players) {
            System.out.println("\nüé∞ Lottery System ‚Äî Each ticket costs Rs.100");
            System.out.println("üí° Winner takes 90% of the pot + accumulated bonus pool!");
            System.out.println("üéÅ Current Bonus Pool: Rs." + lotteryBonusPool);

            long ticketPrice = 100L;
            long totalPot = 0L;

            ArrayList<Person> ticketPool = new ArrayList<>();

            for (Person p : players) {
                System.out.println("\n" + p.name + ", your balance: Rs." + p.balance);
                System.out.print("Enter number of tickets to buy (0 to skip): ");
                int numTickets = readInt();
                if (numTickets < 0) { System.out.println("‚ùå Invalid number."); continue; }
                long cost = numTickets * ticketPrice;
                if (numTickets > 0 && cost <= p.balance) {
                    p.balance -= cost; p.addFlow(cost);
                    totalPot += cost;
                    p.lotteryContribution += cost;
                    for (int t=0;t<numTickets;t++) ticketPool.add(p);
                    System.out.println("‚úÖ " + p.name + " bought " + numTickets + " tickets for Rs." + cost);
                } else if (numTickets > 0) {
                    System.out.println("‚ùå Not enough balance! Skipped.");
                } else {
                    System.out.println("‚è≠ " + p.name + " skipped the lottery.");
                }
            }

            if (ticketPool.isEmpty()) { System.out.println("\n‚ö†Ô∏è No tickets bought. Lottery cancelled."); return; }

            // Draw winner
            Person winner = ticketPool.get(rand.nextInt(ticketPool.size()));
            long tax = Math.round(totalPot * 0.10);
            long prize = Math.round(totalPot * 0.90) + lotteryBonusPool;

            // Payout winner
            winner.balance += prize; winner.addFlow(prize);
            if (prize > winner.biggestLotteryWin) winner.biggestLotteryWin = prize;

            // Grow the progressive pool by adding this round's tax
            lotteryBonusPool += tax;

            System.out.println("\nüèÜ Lottery Winner: " + winner.name + "!");
            System.out.println("üí∞ Prize paid: Rs." + prize + " (includes previous bonus pool)");
            System.out.println("üìâ Tax collected this round: Rs." + tax + " ‚Üí added to bonus pool.");
            System.out.println("üéÅ New Bonus Pool (for next round): Rs." + lotteryBonusPool);
        }

        /* ---- Card Poll + Rummy (from Code1) ---- */
        static void startCardPoll(List<Person> players) {
            int yesVotes = 0;
            ArrayList<Person> consenting = new ArrayList<>();
            System.out.println("\nüÉè A player has requested to start CARD GAMES!");
            for (Person p : players) {
                System.out.print(p.name + ", do you agree? (yes/no): ");
                String vote = SC.next();
                if (vote.equalsIgnoreCase("yes")) {
                    yesVotes++;
                    consenting.add(p);
                }
            }
            if (yesVotes > players.size() / 2) {
                System.out.println("‚úÖ Majority agreed! Card games starting now...");
                // Map consenting persons to lightweight PlayerAdapter for Rummy
                PlayerAdapter[] arr = new PlayerAdapter[consenting.size()];
                for (int i=0;i<consenting.size();i++) arr[i] = new PlayerAdapter(consenting.get(i).name);

                int[] result = RummyModule.runRummyGame(SC, arr); // {winnerIdxInConsenting, points}
                if (result[0] >= 0) {
                    Person winner = consenting.get(result[0]);
                    int points = result[1];
                    winner.balance += points; winner.addFlow(points);
                    System.out.println("üéâ " + winner.name + " received +" + points + " to balance. New balance: Rs." + winner.balance);
                } else {
                    System.out.println("No Rummy winner.");
                }
            } else {
                System.out.println("‚ùå Not enough votes. Card games cancelled.");
            }
        }

        // Minimal adapter to satisfy RummyModule API without bringing Code1's Player directly
        static class PlayerAdapter {
            String name;
            PlayerAdapter(String n) { name = n; }
        }

        /* ---- Rummy Module (unchanged logic; prints to console) ---- */
        static class RummyModule {

            enum Suit { H, D, C, S, JOKER }
            static final String[] SUIT_NAMES = {"Hearts", "Diamonds", "Clubs", "Spades"};
            static final String[] RANK_CODES = {"A","2","3","4","5","6","7","8","9","10","J","Q","K"};
            static final Map<String,Integer> RANK_VAL = new HashMap<>();
            static { for (int i=0;i<RANK_CODES.length;i++) RANK_VAL.put(RANK_CODES[i], i+1); }

            static class Card {
                Suit suit; String rank; String code;
                Card(Suit suit, String rank) {
                    this.suit = suit; this.rank = rank;
                    this.code = (suit == Suit.JOKER) ? "JOKER" : suit.name() + rank;
                }
                String pretty() {
                    if (suit == Suit.JOKER) return "Printed Joker";
                    String suitName = SUIT_NAMES[suit.ordinal()];
                    String r = rank;
                    if (rank.equals("A")) r = "Ace";
                    else if (rank.equals("J")) r = "Jack";
                    else if (rank.equals("Q")) r = "Queen";
                    else if (rank.equals("K")) r = "King";
                    return r + " of " + suitName;
                }
                boolean isPrintedJoker() { return suit == Suit.JOKER; }
                boolean isWildJoker(String wild) { return (rank != null && rank.equals(wild)); }
                public String toString() { return code; }
            }

            static class Deck {
                List<Card> stock = new ArrayList<>();
                Deque<Card> discard = new ArrayDeque<>();
                String wildRank;
                Deck(int numDecks, int printedJokers) {
                    for (int d=0; d<numDecks; d++) {
                        for (Suit s : new Suit[]{Suit.H, Suit.D, Suit.C, Suit.S}) {
                            for (int i=0;i<RANK_CODES.length;i++) stock.add(new Card(s, RANK_CODES[i]));
                        }
                        for (int pj=0; pj<printedJokers; pj++) stock.add(new Card(Suit.JOKER, null));
                    }
                    Collections.shuffle(stock);
                    Card open = drawNonJokerTop();
                    wildRank = open.rank;
                    discard.push(open);
                }
                private Card drawNonJokerTop() {
                    while (!stock.isEmpty()) {
                        Card c = stock.remove(stock.size()-1);
                        if (!c.isPrintedJoker()) return c;
                    }
                    return null;
                }
                Card drawFromStock() {
                    if (stock.isEmpty()) {
                        if (discard.size() <= 1) return null;
                        Card top = discard.pop();
                        List<Card> rest = new ArrayList<>(discard);
                        discard.clear(); discard.push(top);
                        Collections.shuffle(rest);
                        stock.addAll(rest);
                    }
                    return stock.remove(stock.size()-1);
                }
                Card peekDiscard() { return discard.peek(); }
                Card drawFromDiscard() { return discard.isEmpty() ? null : discard.pop(); }
                void placeToDiscard(Card c) { discard.push(c); }
            }

            static class RummyPlayer {
                String name; List<Card> hand = new ArrayList<>();
                RummyPlayer(String name) { this.name = name; }
                void add(Card c) { hand.add(c); }
                void remove(Card c) { hand.remove(c); }
                void showPrivateHand(String wild) {
                    System.out.println("[" + name + " ‚Äî Your Hand]");
                    for (Card c : hand) {
                        String tag = "";
                        if (c.isPrintedJoker()) tag = " (Printed Joker)";
                        else if (c.isWildJoker(wild)) tag = " (Wild Joker)";
                        System.out.println("  " + c.code + "  ‚Üí  " + c.pretty() + tag);
                    }
                }
                void showPublicCodes() {
                    System.out.print(name + "'s cards: ");
                    for (Card c : hand) System.out.print(c.code + " ");
                    System.out.println();
                }
            }

            static boolean isValidRummyHand(List<Card> hand, String wild) {
                if (hand.size() != 13) return false;
                List<Card> jokers = new ArrayList<>(), normal = new ArrayList<>();
                for (Card c : hand) {
                    if (c.isPrintedJoker() || c.isWildJoker(wild)) jokers.add(c); else normal.add(c);
                }
                return canFormValidHand(normal, jokers, false, 0);
            }

            static boolean canFormValidHand(List<Card> normal, List<Card> jokers, boolean hasPure, int seqCount) {
                if (normal.isEmpty() && jokers.isEmpty()) return hasPure && seqCount >= 2;

                for (Suit s : Suit.values()) {
                    if (s == Suit.JOKER) continue;
                    List<Card> suited = new ArrayList<>();
                    for (Card c : normal) if (c.suit == s) suited.add(c);
                    if (suited.size() < 3) continue;
                    Collections.sort(suited, new Comparator<Card>() {
                        public int compare(Card a, Card b) { return RANK_VAL.get(a.rank) - RANK_VAL.get(b.rank); }
                    });
                    for (int i=0;i<suited.size()-2;i++) {
                        List<Card> seq = new ArrayList<>();
                        seq.add(suited.get(i));
                        int expected = RANK_VAL.get(suited.get(i).rank);
                        for (int j=i+1;j<suited.size();j++) {
                            int val = RANK_VAL.get(suited.get(j).rank);
                            if (val == expected+1) { seq.add(suited.get(j)); expected=val; }
                            else if (val > expected+1) break;
                            if (seq.size()>=3) {
                                List<Card> newNorm = new ArrayList<>(normal); newNorm.removeAll(seq);
                                if (canFormValidHand(newNorm, jokers, true, seqCount+1)) return true;
                            }
                        }
                    }
                }

                for (Suit s : Suit.values()) {
                    if (s == Suit.JOKER) continue;
                    List<Card> suited = new ArrayList<>();
                    for (Card c : normal) if (c.suit == s) suited.add(c);
                    Collections.sort(suited, new Comparator<Card>() {
                        public int compare(Card a, Card b) { return RANK_VAL.get(a.rank) - RANK_VAL.get(b.rank); }
                    });
                    if (suited.size() >= 2 && jokers.size() >= 1) {
                        List<Card> newNorm = new ArrayList<>(normal);
                        List<Card> newJok = new ArrayList<>(jokers);
                        newNorm.remove(suited.get(0)); newNorm.remove(suited.get(1));
                        newJok.remove(0);
                        if (canFormValidHand(newNorm, newJok, hasPure, seqCount+1)) return true;
                    }
                }

                Map<String, List<Card>> rankGroups = new HashMap<>();
                for (Card c : normal) {
                    if (!rankGroups.containsKey(c.rank)) rankGroups.put(c.rank, new ArrayList<Card>());
                    rankGroups.get(c.rank).add(c);
                }
                for (String r : rankGroups.keySet()) {
                    List<Card> group = rankGroups.get(r);
                    if (group.size() >= 3) {
                        List<Card> newNorm = new ArrayList<>(normal);
                        newNorm.removeAll(group.subList(0,3));
                        if (canFormValidHand(newNorm, jokers, hasPure, seqCount)) return true;
                    }
                    if (group.size() == 2 && jokers.size() >= 1) {
                        List<Card> newNorm = new ArrayList<>(normal);
                        newNorm.removeAll(group);
                        List<Card> newJok = new ArrayList<>(jokers);
                        newJok.remove(0);
                        if (canFormValidHand(newNorm, newJok, hasPure, seqCount)) return true;
                    }
                }
                return false;
            }

            static int computeScore(List<Card> hand) {
                int sum = 0;
                for (Card c : hand) {
                    if (c.isPrintedJoker()) continue;
                    String r = c.rank;
                    if (r == null) continue;
                    if (r.equals("A")) sum += 1;
                    else if (r.equals("J") || r.equals("Q") || r.equals("K")) sum += 10;
                    else {
                        try { sum += Integer.parseInt(r); }
                        catch (NumberFormatException e) {
                            Integer v = RANK_VAL.get(r);
                            if (v != null) sum += v;
                        }
                    }
                }
                return sum;
            }

            // Returns int[]{winnerIndexInPlayersArray, pointsEarned}
            public static int[] runRummyGame(Scanner sc, PlayerAdapter[] electionPlayers) {
                if (electionPlayers == null || electionPlayers.length < 2) {
                    System.out.println("Need at least 2 consenting players to play Rummy.");
                    return new int[]{-1,0};
                }

                RummyPlayer[] rPlayers = new RummyPlayer[electionPlayers.length];
                for (int i=0;i<electionPlayers.length;i++) rPlayers[i] = new RummyPlayer(electionPlayers[i].name);

                // deck
                Deck deck = new Deck(2,2);
                System.out.println("\n=== Starting 13-Card Rummy with players: ===");
                for (RummyPlayer rp : rPlayers) System.out.println(" - " + rp.name);
                System.out.println("Wild Joker Rank: " + deck.wildRank);
                System.out.println("Discard starts with: " + deck.peekDiscard().pretty());

                // deal 13 each
                for (int i=0;i<13;i++) for (RummyPlayer p: rPlayers) p.add(deck.drawFromStock());
                for (RummyPlayer p: rPlayers) p.showPublicCodes();

                int turn = 0; boolean over = false; int winnerIdx = -1; int winnerPoints = 0;

                while (!over) {
                    RummyPlayer cur = rPlayers[turn];
                    System.out.println("\n--- " + cur.name + "'s TURN ---");
                    cur.showPrivateHand(deck.wildRank);
                    System.out.println("Top of discard: " + deck.peekDiscard().pretty());

                    System.out.print("Draw from (1) Stock or (2) Discard? ");
                    int choice = readIntDefault(1);

                    Card drawn = (choice==2?deck.drawFromDiscard():deck.drawFromStock());
                    if (drawn==null) { System.out.println("No card to draw! (skipping)"); turn=(turn+1)%rPlayers.length; continue; }
                    cur.add(drawn);
                    System.out.println("You drew: " + drawn.pretty());

                    System.out.print("Enter code to discard (or DECLARE to show hand): ");
                    String code = SC.next().trim().toUpperCase();

                    if (code.equals("DECLARE")) {
                        if (isValidRummyHand(cur.hand, deck.wildRank)) {
                            System.out.println(cur.name+" declared and WON!");
                            over = true; winnerIdx = turn; winnerPoints = computeScore(cur.hand);
                            break;
                        } else {
                            System.out.println("Invalid declaration. You lose your turn.");
                        }
                    } else {
                        Card discardCard = null;
                        for (Card c : new ArrayList<Card>(cur.hand)) if (c.code.equalsIgnoreCase(code)) discardCard = c;
                        if (discardCard == null) { System.out.println("Invalid code. Auto discard drawn."); discardCard = drawn; }
                        cur.remove(discardCard); deck.placeToDiscard(discardCard);
                        System.out.println(cur.name+" discarded "+discardCard.pretty());
                    }

                    turn = (turn+1) % rPlayers.length;
                }

                if (winnerIdx >= 0) {
                    System.out.println("\nüèÜ Rummy Winner: " + rPlayers[winnerIdx].name + " (points: " + winnerPoints + ")");
                    return new int[]{winnerIdx, winnerPoints};
                } else {
                    System.out.println("No winner for Rummy.");
                    return new int[]{-1,0};
                }
            }

            static int readIntDefault(int def) {
                try { return Integer.parseInt(SC.next()); } catch (Exception e) { return def; }
            }
        }
    }

    /* ===============================
       ========== GAME LOOP ==========
       =============================== */

    public static void main(String[] args) {
        System.out.println("üè¶ Welcome to the Unified Life & Economy Simulator!");
        System.out.print("Enter number of players: ");
        int n = readInt();
        SC.nextLine(); // consume endline

        List<Person> players = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            System.out.print("Enter player " + (i+1) + " name: ");
            String name = SC.nextLine().trim();
            if (name.isEmpty()) name = "Player_" + (i+1);
            players.add(new Person(name));
        }

        List<String> log = new ArrayList<>();
        boolean running = true;

        while (running) {
            for (Person p : players) {
                if (!p.alive) { System.out.println("\n--- " + p.name + " is deceased. Skipping turn. ---"); continue; }

                System.out.println("\n==============================");
                System.out.println("Turn ‚Äî " + p.name);
                p.showStatus();
                System.out.println("------------------------------");
                System.out.println(
                    "1) Live year (auto)\n" +
                    "2) Study\n" +
                    "3) Work\n" +
                    "4) Improve stats\n" +
                    "5) Risky (life-side)\n" +
                    "6) Economic Actions (bank, gamble, lottery, rummy)\n" +
                    "7) Show recent log\n" +
                    "8) Exit game"
                );
                System.out.print("Choose: ");
                int choice = readInt();

                switch (choice) {
                    case 1: p.passYear(log); break;
                    case 2: doStudyFor(p, log); break;
                    case 3: doWorkFor(p, log); break;
                    case 4: doImproveFor(p, log); break;
                    case 5: doRiskyFor(p, log); break;
                    case 6: Economy.economicMenu(p, players); break;
                    case 7: showRecentLog(log); break;
                    case 8:
                        running = false;
                        System.out.println("üëã Game ended by " + p.name);
                        break;
                    default: System.out.println("‚ùå Invalid choice!");
                }

                if (!running) break;
            }
        }

        // Final Results
        System.out.println("\nüìä Final Results:");
        for (Person p : players) {
            p.showStatus();
            System.out.println("   Gambles: played " + p.gamblesPlayed + ", won " + p.gamblesWon + ", lost " + p.gamblesLost);
            System.out.println("   Money Won: Rs." + p.moneyWon + " | Money Lost: Rs." + p.moneyLost + " | Lifetime Flows: Rs." + p.lifetimeTotal);
            System.out.println("   Biggest Lottery Win: Rs." + p.biggestLotteryWin + " | Lottery Contribution: Rs." + p.lotteryContribution);
            System.out.println("-------------------------------");
        }
    }

    /* ===============================
       ======= LIFE ACTIONS UI =======
       =============================== */

    static void doStudyFor(Person p, List<String> log) {
        System.out.println("\nStudy options:");
        System.out.println("1) High School (+5 INT, -2 HAPPY; chance to complete HS if age>=16)");
        System.out.println("2) College (+8 INT, -3 HAPPY; requires HS; chance to complete)");
        System.out.println("3) Short Course (+3 INT, -Rs.2000)");
        System.out.print("Choose: ");
        int sel = readInt();
        switch (sel) {
            case 1:
                p.intelligence += 5; p.happiness -= 2;
                if (p.age >= 16 && RNG.nextInt(100) < 30) { p.education = "HS"; log.add(p.name+" completed HS."); }
                p.passYear(log);
                break;
            case 2:
                if (!p.education.equals("HS")) { System.out.println("Need HS first."); return; }
                p.intelligence += 8; p.happiness -= 3;
                if (RNG.nextInt(100) < 40) { p.education = "College"; log.add(p.name+" graduated College."); }
                p.passYear(log);
                break;
            case 3:
                p.intelligence += 3; long fee = 2000; spend(p, fee, log, "short course fee");
                p.passYear(log);
                break;
            default: System.out.println("Invalid."); break;
        }
    }

    static void doWorkFor(Person p, List<String> log) {
        String[] jobs = {"Retail Worker","Teacher","Engineer","Doctor","Artist","Criminal","Keep current job","Quit job"};
        System.out.println("\nWork options:");
        for (int i=0;i<jobs.length;i++) System.out.println((i+1)+") "+jobs[i]);
        System.out.print("Choose: ");
        int sel = readInt();
        if (sel < 1 || sel > jobs.length) { System.out.println("Invalid."); return; }
        String choice = jobs[sel-1];
        if (choice.equals("Keep current job")) { p.happiness -= 1; p.passYear(log); }
        else if (choice.equals("Quit job")) { p.job = "Unemployed"; p.happiness += 5; p.passYear(log); }
        else {
            // requirements (roughly matching Code2)
            if (choice.equals("Teacher") && (p.intelligence < 60 || eduRank(p.education) < eduRank("HS"))) { failJob(p, choice, log); return; }
            else if (choice.equals("Engineer") && (p.intelligence < 75 || eduRank(p.education) < eduRank("College"))) { failJob(p, choice, log); return; }
            else if (choice.equals("Doctor") && (p.intelligence < 90 || eduRank(p.education) < eduRank("Masters"))) { failJob(p, choice, log); return; }
            else if (choice.equals("Retail Worker") && p.intelligence < 20) { failJob(p, choice, log); return; }
            else if (choice.equals("Artist") && p.looks < 30) { failJob(p, choice, log); return; }
            // Criminal has no constraints
            p.job = choice; p.happiness += 5; log.add(p.name+" got job: " + choice);
            p.passYear(log);
        }
    }

    static void doImproveFor(Person p, List<String> log) {
        System.out.println("\nImprove options:");
        System.out.println("1) Gym (+8 Health, +2 Happy, -Rs.2000)");
        System.out.println("2) Study Hard (+6 Int, -3 Happy, -Rs.1000)");
        System.out.println("3) Go on a Date (swingy)");
        System.out.print("Choose: ");
        int sel = readInt();
        switch (sel) {
            case 1:
                p.health += 8; p.happiness += 2; spend(p, 2000, log, "gym");
                p.passYear(log);
                break;
            case 2:
                p.intelligence += 6; p.happiness -= 3; spend(p, 1000, log, "study materials");
                p.passYear(log);
                break;
            case 3:
                if (RNG.nextBoolean()) {
                    p.happiness += 8; spend(p, 3000, log, "date");
                    log.add(p.name+" had a great date.");
                } else {
                    p.happiness -= 5; spend(p, 2000, log, "bad date");
                    log.add(p.name+" had a bad date.");
                }
                p.passYear(log);
                break;
            default: System.out.println("Invalid.");
        }
    }

    static void doRiskyFor(Person p, List<String> log) {
        System.out.println("\nRisky options:");
        System.out.println("1) Life-side Gamble (quick)");
        System.out.println("2) Small Crime");
        System.out.println("3) Do Nothing");
        System.out.print("Choose: ");
        int sel = readInt();
        switch (sel) {
            case 1:
                if (RNG.nextInt(100) < 45) {
                    long win = (RNG.nextInt(10)+1)*1000L;
                    p.balance += win; p.addFlow(win); p.happiness += 5;
                    log.add(p.name+" won gamble Rs."+win);
                } else {
                    long lose=(RNG.nextInt(20)+1)*1000L;
                    lose = Math.min(lose, p.balance);
                    p.balance -= lose; p.addFlow(lose); p.happiness -= 10;
                    log.add(p.name+" lost gamble Rs."+lose);
                }
                p.passYear(log);
                break;
            case 2:
                if (RNG.nextInt(100) < 40) {
                    long loot=(RNG.nextInt(30)+1)*1000L;
                    p.balance += loot; p.addFlow(loot); p.happiness -= 10;
                    log.add(p.name+" crime succeeded Rs."+loot);
                } else {
                    long fine=5000; fine = Math.min(fine, p.balance);
                    p.balance -= fine; p.addFlow(fine); p.health -= 10; p.happiness -= 20;
                    log.add(p.name+" was caught committing crime.");
                }
                p.passYear(log);
                break;
            case 3:
                // no passYear here‚Äîstaying idle in risky panel; let user decide separate Live Year if desired
                break;
            default: System.out.println("Invalid.");
        }
    }

    /* ===============================
       =========== HELPERS ===========
       =============================== */

    static void spend(Person p, long amt, List<String> log, String what) {
        long pay = Math.min(amt, p.balance);
        p.balance -= pay; p.addFlow(pay);
        if (pay > 0) log.add(p.name+" spent Rs." + pay + " on " + what + ".");
    }

    static int eduRank(String e) {
        if (e.equals("None")) return 0;
        if (e.equals("HS")) return 1;
        if (e.equals("College")) return 2;
        if (e.equals("Masters")) return 3;
        return 0;
        }

    static void failJob(Person p, String job, List<String> log) {
        p.happiness -= 5;
        log.add(p.name+" failed job application: " + job);
        p.passYear(log);
    }

    static void showRecentLog(List<String> log) {
        System.out.println("\n----- Recent Log -----");
        int start = Math.max(0, log.size() - 30);
        for (int i=start; i<log.size(); i++) System.out.println("‚Ä¢ " + log.get(i));
        if (log.isEmpty()) System.out.println("(empty)");
        System.out.println("----------------------");
    }

    static int readInt() {
        while (true) {
            try { return Integer.parseInt(SC.next()); }
            catch (Exception e) { System.out.print("Enter a number: "); }
        }
    }

    static long readLong() {
        while (true) {
            try { return Long.parseLong(SC.next()); }
            catch (Exception e) { System.out.print("Enter a whole amount: "); }
        }
    }
}